
'use server'; // Can be used by Server Components

import { collection, addDoc, getDocs, serverTimestamp, query, orderBy } from "firebase/firestore";
import { db } from '@/lib/firebase';
import type { Donor, BloodGroup } from '@/types';
import { BLOOD_GROUPS } from "@/lib/constants"; // Import BLOOD_GROUPS

const donorsCollectionRef = collection(db, 'donors');

// Type for data being added (ID is auto-generated by Firestore)
export type NewDonorData = {
  name: string;
  bloodGroup: BloodGroup;
  location: string;
  contact: string;
  // createdAt?: any; // If you want to use serverTimestamp
};

export async function addDonor(donorData: NewDonorData): Promise<string> {
  try {
    const docRef = await addDoc(donorsCollectionRef, donorData);
    console.log("Donor (server) added with ID: ", docRef.id);
    return docRef.id;
  } catch (error: any) {
    console.error("Firestore 'addDonor' service error:", error);

    let errorMessage = "Failed to register donor due to a server-side issue. Please check server logs and try again later.";
    if (error?.code === 'permission-denied') {
      errorMessage = "Failed to register donor: Firestore permission denied. Please verify your Firestore security rules allow 'create' on the 'donors' collection for authenticated users.";
    } else if (error instanceof Error) {
      if (error.message.toLowerCase().includes('deadline_exceeded') || error.message.toLowerCase().includes('timeout')) {
        errorMessage = "Failed to register donor: The request to the database timed out. This might be a temporary network issue or a problem with the database service. Please try again shortly.";
      } else {
        errorMessage = `Failed to register donor: ${error.message}. Please try again later.`;
      }
    }
    throw new Error(errorMessage);
  }
}

export async function getDonors(): Promise<Donor[]> {
  try {
    const q = query(donorsCollectionRef, orderBy("name"));
    const querySnapshot = await getDocs(q);

    const donors = querySnapshot.docs.map(doc => {
      const data = doc.data();
      let validBloodGroup = data.bloodGroup as BloodGroup;
      if (!BLOOD_GROUPS.includes(data.bloodGroup)) {
        console.warn(`Invalid blood group '${data.bloodGroup}' for donor ID ${doc.id}. Defaulting to A+.`);
        validBloodGroup = "A+"; // Default to a valid blood group
      }

      return {
        id: doc.id,
        name: data.name || 'N/A',
        bloodGroup: validBloodGroup,
        location: data.location || 'N/A',
        contact: data.contact || 'N/A',
      } as Donor;
    });
    return donors;
  } catch (error) {
    console.error("Error fetching donors from Firestore in donorService: ", error);
    // Return empty array instead of throwing to prevent page crash
    return [];
  }
}
