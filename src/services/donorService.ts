
'use server'; // Can be used by Server Components

import { collection, addDoc, getDocs, serverTimestamp, query, orderBy } from "firebase/firestore";
import { db } from '@/lib/firebase';
import type { Donor, BloodGroup } from '@/types';

const donorsCollectionRef = collection(db, 'donors');

// Type for data being added (ID is auto-generated by Firestore)
export type NewDonorData = {
  name: string;
  bloodGroup: BloodGroup;
  location: string;
  contact: string;
  // createdAt?: any; // If you want to use serverTimestamp
};

export async function addDonor(donorData: NewDonorData): Promise<string> {
  try {
    // If you want to add a server-side timestamp for when the donor was created:
    // const docRef = await addDoc(donorsCollectionRef, { ...donorData, createdAt: serverTimestamp() });
    const docRef = await addDoc(donorsCollectionRef, donorData);
    console.log("Donor added with ID: ", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("Error adding donor to Firestore: ", error);
    throw new Error("Failed to register donor. Please try again.");
  }
}

export async function getDonors(): Promise<Donor[]> {
  try {
    // Example: Order donors by name. You can add more complex queries or ordering.
    const q = query(donorsCollectionRef, orderBy("name")); 
    const querySnapshot = await getDocs(q);
    
    const donors = querySnapshot.docs.map(doc => {
      const data = doc.data();
      // Ensure all fields of Donor type are present, provide defaults or handle missing fields if necessary
      return {
        id: doc.id,
        name: data.name || 'N/A',
        bloodGroup: data.bloodGroup || 'Unknown',
        location: data.location || 'N/A',
        contact: data.contact || 'N/A',
        // If you added createdAt and want to convert it:
        // createdAt: data.createdAt?.toDate().toISOString() || new Date().toISOString(), 
      } as Donor;
    });
    return donors;
  } catch (error) {
    console.error("Error fetching donors from Firestore: ", error);
    // Depending on usage, you might want to return empty array or re-throw
    return []; 
  }
}
